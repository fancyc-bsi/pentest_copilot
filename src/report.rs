use std::collections::HashMap;

#[derive(Debug, Clone)]
pub struct PluginReport {
    pub id: u32,
    pub description: String,
    pub target: String,
    pub port: String,
    pub output: String,
}

pub struct Report {
    nmap_results_by_host: HashMap<String, String>,
    reports_by_host: HashMap<String, HashMap<String, Vec<PluginReport>>>,
}

impl Report {
    pub fn new() -> Self {
        Report { 
            nmap_results_by_host: HashMap::new(),
            reports_by_host: HashMap::new(),
        }
    }

    pub fn add_nmap_result(&mut self, target: &str, result: String) {
        self.nmap_results_by_host.insert(target.to_string(), result);
    }

    pub fn add_report(&mut self, report: PluginReport) {
        let host_reports = self.reports_by_host
            .entry(report.target.clone())
            .or_insert_with(HashMap::new);

        host_reports.entry(report.port.clone())
            .or_insert_with(Vec::new)
            .push(report);
    }

    pub fn generate_markdown(&self) -> String {
        let mut markdown = String::new();
        markdown.push_str("# Pentest Report\n\n");

        for (host, port_reports) in &self.reports_by_host {
            markdown.push_str(&format!("## Initial Nmap Scan Result for Host: {}\n", host));
            if let Some(nmap_result) = self.nmap_results_by_host.get(host) {
                markdown.push_str(&format!("```\n{}\n```\n\n", nmap_result));
            }
            
            for (port, reports) in port_reports {
                markdown.push_str(&format!("### Port: {}\n", port));
                for report in reports {
                    markdown.push_str(&format!("#### Plugin ID: {}\n", report.id));
                    markdown.push_str(&format!("**Description:** {}\n", report.description));
                    markdown.push_str(&format!("**Output:**\n```\n{}\n```\n\n", report.output));
                }
            }
        }
        markdown
    }
}
