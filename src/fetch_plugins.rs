use reqwest;
use serde_derive::Deserialize;
use std::path::Path;
use tokio::fs;
use anyhow::{Result, Context};
use dirs::home_dir;

#[derive(Deserialize)]
struct GitHubFile {
    name: String,
    download_url: String,
    sha: String,
}

pub async fn ensure_plugins_exist() -> Result<()> {
    let base_path = home_dir().expect("Failed to get home directory").join(".plugins");
    fs::create_dir_all(&base_path).await.context("Failed to create plugins directory")?;

    if should_fetch_plugins(&base_path).await {
        fetch_plugins(&base_path).await.context("Failed to fetch plugins")?;
    }

    Ok(())
}

async fn should_fetch_plugins(base_path: &Path) -> bool {
    let client = reqwest::Client::new();
    let repo_url = "https://api.github.com/repos/fancyc-bsi/pentest_copilot/contents/plugins";
    let resp = client.get(repo_url)
        .header("User-Agent", "Pentest-Copilot")
        .header("Accept", "application/vnd.github.v3+json")
        .send().await.expect("Failed to send request");

    let plugins: Vec<GitHubFile> = resp.json().await.expect("Failed to parse response");

    for file in plugins {
        if file.name.ends_with(".yaml") {
            let local_path = base_path.join(&file.name);
            if !local_path.exists() {
                return true;
            }
            let local_sha = fs::read_to_string(local_path.with_extension("sha"))
                .await
                .unwrap_or_default();
            if local_sha != file.sha {
                return true;
            }
        }
    }
    false
}

async fn fetch_plugins(base_path: &Path) -> Result<()> {
    let client = reqwest::Client::new();
    let repo_url = "https://api.github.com/repos/fancyc-bsi/pentest_copilot/contents/plugins";
    let resp = client.get(repo_url)
        .header("User-Agent", "Pentest-Copilot")
        .header("Accept", "application/vnd.github.v3+json")
        .send().await?.error_for_status()?;

    let plugins: Vec<GitHubFile> = resp.json().await?;

    for file in plugins {
        if file.name.ends_with(".yaml") {
            let content_resp = client.get(&file.download_url)
                .header("User-Agent", "Pentest-Copilot")
                .send().await?.error_for_status()?;
            let contents = content_resp.bytes().await?;
            fs::write(base_path.join(&file.name), &contents).await?;
            fs::write(base_path.join(format!("{}.sha", &file.name)), file.sha).await?;
        }
    }

    Ok(())
}
