mod nmap;
mod parser;
mod types;
mod actions;
mod report;
mod render;
mod logger; // Include the logger module

use clap::{Arg, Command};
use actions::ReconActions;
use report::Report;
use render::Renderer;
use logger::Logger; // Use the Logger struct
use tokio::fs::File;
use tokio::io::AsyncWriteExt;

#[tokio::main]
async fn main() {
    let matches = Command::new("Rust Recon Tool")
        .version("0.1.0")
        .author("Your Name <your.email@example.com>")
        .about("Automates initial reconnaissance for pentesting")
        .arg(Arg::new("target")
            .short('t')
            .long("target")
            .takes_value(true)
            .help("Target IP or hostname to scan")
            .required(true))
        .get_matches();

    let target = matches.value_of("target").unwrap();
    Logger::info("Starting inital nmap scan...");

    match nmap::run_nmap(target) {
        Ok(xml_results) => {
            match parser::parse_nmap_output(&xml_results) {
                Ok(nmap_run) => {
                    if nmap_run.hosts.is_empty() {
                        Logger::warning("No hosts found, check XML structure and Rust structs alignment.");
                    } else {
                        Logger::info("Calculating actions...");
                        let mut recon_actions = ReconActions::new().await.unwrap();
                        let mut report = Report::new(xml_results.clone());  
                        Logger::info("Launching actions...");

                        let actions_to_perform = recon_actions.determine_actions(&nmap_run).await;
                        for (port, _actions) in actions_to_perform.iter() {
                            match recon_actions.execute_actions(&nmap_run, &mut report).await {
                                Ok(_) => Logger::success(&format!("Actions executed successfully on port {}", port)),
                                Err(e) => Logger::error(&format!("Failed to execute actions on port {}: {}", port, e)),
                            }
                        }
                        
                        let markdown_report = report.generate_markdown();
                        let html_report = Renderer::render_to_html(&markdown_report);
                        
                        let mut file = File::create("pentest_report.html").await.unwrap();
                        file.write_all(html_report.as_bytes()).await.unwrap();
                        Logger::success("HTML report saved to 'pentest_report.html'.");
                    }
                },
                Err(e) => Logger::error(&format!("Error parsing XML: {}", e)),
            }
        }
        Err(e) => Logger::error(&format!("Failed to run nmap: {}", e)),
    }
}
