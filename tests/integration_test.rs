// tests/integration_test.rs

mod tests {
    use pentest_copilot::{parser, types::NmapRun, actions::{Plugin, ReconActions}, report::Report};
    use tokio::runtime::Runtime;

    fn setup() -> Runtime {
        Runtime::new().unwrap()
    }

    #[test]
    fn test_nmap_parse() {
        let xml_data = r#"
        <?xml version="1.0"?>
        <nmaprun>
            <host><address addr="192.168.1.1" addrtype="ipv4"/>
            <ports>
                <port protocol="tcp" portid="80">
                    <state state="open"/>
                    <service name="http" product="Apache" version="2.4"/>
                </port>
            </ports>
            </host>
        </nmaprun>
        "#;
        let parsed = parser::parse_nmap_output(xml_data);
        assert!(parsed.is_ok());
        let nmap_run = parsed.unwrap();
        assert_eq!(nmap_run.hosts.len(), 1);
        assert_eq!(nmap_run.hosts[0].ports.ports.len(), 1);
        assert_eq!(nmap_run.hosts[0].ports.ports[0].service.name, "http");
    }

    #[test]
    fn test_plugin_execution() {
        let rt = setup();
        rt.block_on(async {
            let plugin = Plugin {
                id: 104,
                description: "Test Plugin".to_string(),
                command: "echo".to_string(),
                args: vec!["Hello, world!".to_string()],
                needs_port: false,
                requires_http: false,
                requires_https: false,
                include_port_in_url: false
            };
            let output = plugin.execute("localhost", None).await;
            assert!(output.is_ok());
            assert_eq!(output.unwrap().trim(), "Hello, world! localhost");
        });
    }


    #[test]
    fn test_recon_actions_execution() {
        let rt = setup();
        rt.block_on(async {
            let mut recon = ReconActions::new().await.unwrap();
            // let mock_nmap_result = "Mock Nmap Result".to_string();
            let mut report = Report::new();  
            let nmap_run = NmapRun { hosts: vec![] };

            let result = recon.execute_actions(&nmap_run, &mut report).await;
            assert!(result.is_ok());
        });
    }
}
