use serde_derive::{Deserialize, Serialize};

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct NmapRun {
    #[serde(rename = "host", default)]
    pub hosts: Vec<Host>,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct Host {
    #[serde(rename = "address", default)]
    pub addresses: Vec<Address>,
    #[serde(rename = "ports", default)]
    pub ports: Ports,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct Address {
    #[serde(rename = "addr")]
    pub addr: String,
    #[serde(rename = "addrtype")]
    pub addrtype: String,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct Ports {
    #[serde(rename = "port", default)]
    pub ports: Vec<Port>,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct Port {
    #[serde(rename = "portid")]
    pub portid: String,
    #[serde(rename = "state", default)]
    pub state: State,
    #[serde(rename = "service", default)]
    pub service: Service,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct State {
    #[serde(rename = "state")]
    pub state: String,
}

#[derive(Debug, Deserialize, Serialize, Default)]
pub struct Service {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "product", default)]
    pub product: String,
    #[serde(rename = "version", default)]
    pub version: String,
}
