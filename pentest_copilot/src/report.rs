#[derive(Debug, Clone)]
pub struct PluginReport {
    pub id: u32,
    pub description: String,
    pub target: String,
    pub port: String,
    pub output: String,
}

pub struct Report {
    nmap_result: String,
    reports: Vec<PluginReport>,
}

impl Report {
    pub fn new(nmap_result: String) -> Self {
        Report { nmap_result, reports: Vec::new() }
    }

    pub fn add_report(&mut self, report: PluginReport) {
        self.reports.push(report);
    }

    pub fn generate_markdown(&self) -> String {
        let mut markdown = String::new();
        markdown.push_str("# Pentest Report\n\n");
        markdown.push_str("## Initial Nmap Scan Result\n");
        markdown.push_str(&format!("```\n{}\n```\n\n", self.nmap_result));
        
        for report in &self.reports {
            markdown.push_str(&format!("## Plugin ID: {}\n", report.id));
            markdown.push_str(&format!("**Description:** {}\n", report.description));
            markdown.push_str(&format!("**Target:** {}\n", report.target));
            markdown.push_str(&format!("**Port:** {}\n", report.port));
            markdown.push_str(&format!("**Output:**\n```\n{}\n```\n\n", report.output));
        }
        markdown
    }
}
